#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2021 Albert Lv <altair.albert@yahoo.com>
#
# Distributed under terms of the MIT license.
"""

"""

import os
import subprocess
import shutil
import argparse

__VERSION__ = '0.0.1'
XDG_CONFIG_PATH = os.environ.get('XDG_CONFIG_PATH')
HOME = os.environ.get("HOME")

if XDG_CONFIG_PATH is None or XDG_CONFIG_PATH == "":
    XDG_CONFIG_PATH = HOME + "/.config"

DOTFILE_DIR = XDG_CONFIG_PATH + '/' + 'dotfile'


def git_exist():
    completed = subprocess.run(['git', '--version'], capture_output=True)
    return completed.returncode == 0


def is_repo():
    return os.path.exists(DOTFILE_DIR)


def init(remote=None):
    if not is_repo():
        os.makedirs(DOTFILE_DIR, 0o744, exist_ok=True)
        os.chdir(DOTFILE_DIR)
        subprocess.run(['git', 'init'])
        if not remote is None:
            subprocess.run(['git', 'remote', 'add' 'origin', remote])
        return True


def diff():
    if is_repo():
        os.chdir(DOTFILE_DIR)
        subprocess.run(['git', 'diff'])


def status():
    if is_repo():
        os.chdir(DOTFILE_DIR)
        ouput = subprocess.run(['git', 'status', '-s'])
        if ouput.stdout is None:
            print("Everything is update!")
    else:
        print("Error, not a repo, init or sync from remote first")


def add(file):
    if is_repo():
        file = os.path.abspath(file)
        if os.path.isfile(file):
            dir_name = os.path.dirname(file)
            file_name = os.path.basename(file)
            if str(dir_name).startswith(HOME):
                dir_name = dir_name.replace(HOME, '.')
            dst_dir = DOTFILE_DIR + '/' + dir_name
            if os.path.exists(dst_dir + '/' + file_name):
                print("Error, File exists.")
                return False
            os.makedirs(dst_dir, 0o755, exist_ok=True)
            return shutil.copy(file, dst_dir, follow_symlinks=False)
        else:
            print("Error, Need one file")
    else:
        print("Error, not a repo")


def sync(remote=None):
    if not os.path.exists(DOTFILE_DIR):
        os.makedirs(DOTFILE_DIR, 0o755)
    os.chdir(DOTFILE_DIR)
    if not remote is None:
        subprocess.run(['git', 'clone', remote, '.'])
    else:
        subprocess.run(['git', 'pull'])


def upload():
    if is_repo():
        os.chdir(DOTFILE_DIR)
        completed = subprocess.run(['git', 'status', '-s'],
                                   encoding='utf-8',
                                   capture_output=True)
        if completed.returncode == 0:
            if not completed.stdout is None:
                lines = completed.stdout.splitlines(False)
                files = [line.split(' ')[-1] for line in lines]
                if len(files) > 0:
                    subprocess.run(['git', 'add', '.'])
                    subprocess.run([
                        'git', 'commit', '-m',
                        ','.join(map(lambda x: os.path.basename(x), files))
                    ])
                else:
                    return
            else:
                print("No File change.")
                return

        if subprocess.run(['git', 'remote', 'show', 'origin'],
                          capture_output=True).returncode == 0:
            subprocess.run(['git', 'push'])


def remove(file):
    if is_repo():
        if not unlink(file):
            return False
        file = os.path.abspath(file)
        dir_name = os.path.dirname(file)
        file_name = os.path.basename(file)
        if str(dir_name).startswith(HOME):
            dir_name = dir_name.replace(HOME, '.')

        dst_dir = DOTFILE_DIR + '/' + dir_name
        if os.path.exists(dst_dir + '/' + file_name):
            return subprocess.run(
                ['git', 'rm', dst_dir + '/' + file_name, '-f']).returncode == 0
        else:
            print("Error, No file find.")
            return False


def link(file):
    if is_repo():
        dir_name = os.path.dirname(file)
        file_name = os.path.basename(file)
        if str(dir_name).startswith(HOME):
            dir_name = dir_name.replace(HOME, '.')

        dst_dir = DOTFILE_DIR + '/' + dir_name
        store_file = os.path.abspath(dst_dir + '/' + file_name)
        if os.path.exists(store_file):
            if os.path.exists(file):
                overwrite = input("File is exists, Overwrite(Y/n)? ")
                if overwrite == 'Y' or overwrite == 'y':
                    os.remove(file)
                else:
                    print("Cancel by user!")
                    return False
            os.symlink(store_file, file)
            return True
        else:
            print("Error, No file find, use add command first.")
            return False


def unlink(file):
    if is_repo():
        file = os.path.abspath(file)
        if os.path.islink(file):
            dir_name = os.path.dirname(file)
            file_name = os.path.basename(file)
            if str(dir_name).startswith(HOME):
                dir_name = dir_name.replace(HOME, '.')
            dst_dir = DOTFILE_DIR + '/' + dir_name
            if os.path.exists(dst_dir + '/' + file_name):
                os.unlink(file)
                shutil.copy(dst_dir + '/' + file_name, file)
                return True
            else:
                print("Error, No file find, use add command first.")
                return False
        else:
            print("Error, Need one file without link.")


def init_cmd_paser():
    parser = argparse.ArgumentParser()
    parser.add_argument('init')
    return parser


def cmd_paser():
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd',
                        help='init add status upload',
                        nargs='*',
                        type=str)
    parser.add_argument('-v',
                        '--version',
                        action='version',
                        version=__VERSION__,
                        help='show version')
    return parser.parse_args()


if __name__ == '__main__':
    args = cmd_paser()
    action = {
        'status': status,
        'init': init,
        'diff': diff,
        'upload': upload,
        'remove': remove,
        'add': add,
        'sync': sync,
        'link': link,
        'unlink': unlink
    }
    if not git_exist():
        print("Need install git first")
    else:
        if len(args.cmd) == 0:
            status()
        else:
            func = action.get(args.cmd[0])
            if not func is None:
                func(*args.cmd[1:])
